@startuml

title "MVP0: Standalone ML processing"

package Jetson_nano {
	collections ML
	package Train {
		  (Jupyter\nnotebook)
	}
	package UI {
		(WebApp)
	}
	(Jupyter\nnotebook) -> (WebApp) : Streamlit

ML <-down- (Jupyter\nnotebook) : generate
ML <-down- (WebApp) : use
(Jupyter\nnotebook) -down-> (GPU) : use
(WebApp) -down-> (GPU) : use
}

(Jupyter\nnotebook) <-down- (Sensor) : SPI
(WebApp) <-down- (Sensor) : SPI


'======================================================
newpage

title "MVP1: Add MCU via SPI to collect data"

package Jetson_nano {
	collections ML
	package UI {
		(WebApp)
	}
	package Train {
		  (Jupyter\nnotebook)
	}
(Jupyter\nnotebook) -> (WebApp) : Streamlit
ML <-down- (Jupyter\nnotebook) : generate
ML <-down- (WebApp) : use
(Jupyter\nnotebook) -down-> (GPU) : use
(WebApp) -down-> (GPU) : use
}

package MCU {
	(Converter)
}

WebApp <-down- Converter : "data\nvia USB"
Converter <- (Sensor) : SPI

'======================================================
newpage

title "MVP2: Connect via network"

package Jetson_nano {
	collections ML
	package Train {
		  (Jupyter\nnotebook)
	}
	package UI {
		(WebApp)
	}
ML <-down- (Jupyter\nnotebook) : generate
ML <-down- (WebApp) : use
(Jupyter\nnotebook) -> (WebApp) : Streamlit
(Jupyter\nnotebook) -down-> (GPU) : use
(WebApp) -down-> (GPU) : use
}

package RPI {
	(IP address)
}

package MCU {
	(Converter)
}

WebApp -down- RPI : network
RPI <-down- Converter : USB

Converter <- (Sensor) : SPI


'======================================================
newpage

title "MVP3: Offloading with TinyML"

package Jetson_nano {
	collections ML
	package Train {
		  (Jupyter\nnotebook)
	}
	package UI {
		(WebApp)
		
	}
(Jupyter\nnotebook) -> (WebApp) : Streamlit
ML <-down- (Jupyter\nnotebook) : generate
ML <-down- WebApp : use
(Jupyter\nnotebook) -down-> (GPU) : use
(WebApp) -down-> (GPU) : use
}

package RPI {
	(IP address)
}

package MCU {
        artifact ML1
	ML1 -down-> (TinyML)
}
ML .> ML1 : offloading
WebApp -down- RPI : network
RPI -down- MCU : USB
TinyML <- (Sensor) : SPI

'======================================================
newpage

title "MVP4: Add Cloud control UI"

cloud Cloud {
	package UI {
		(WebApp)
	}
}

package Jetson_nano {
	collections ML
	package Train {
		  (Jupyter\nnotebook')
	}
ML <-down- (Jupyter\nnotebook') : generate
(Jupyter\nnotebook') -down-> (GPU) : use
}
ML <-up- WebApp : use

package RPI {
	(IP address)
}

package MCU {
        artifact ML2
	ML2 -down-> (TinyML)
}
ML .down.>ML2 : offloading

WebApp -right-> RPI : use
RPI -down- MCU : USB
TinyML <- (Sensor) : SPI


'======================================================
newpage

title "MVP5: Add Cloud ML"

cloud Cloud {
      collections ML0
      package UI {
      	      (WebApp)
      }
      package Train {
      	      (Jupyter\nnotebook')
      }
      collections GPUs
ML0 <-down- (Jupyter\nnotebook') : generate
ML0 <-down- WebApp : use
(Jupyter\nnotebook') -down-> GPUs : use
WebApp -down-> GPUs : use
(Jupyter\nnotebook') -> WebApp : streamlit
}

package RPI {
	(IP address)
}

package MCU {
        artifact "ML2"
	ML2 -down-> (TinyML)
}

Cloud -down-> RPI
RPI -down- MCU : USB
TinyML <- (Sensor) : SPI
ML0 .down.> ML2 : offloading

package Jetson_nano
WebApp -down-> Jetson_nano

@enduml