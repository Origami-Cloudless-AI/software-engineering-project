@startuml

package Jetson_nano {
	package Train {
	  (Jupyter\nnotebook)
	}
	collections "ML"
	(Jupyter\nnotebook) -up-> ML : generate
	package Inference {
	  (WebApp)
	}
	ML <-down- (WebApp) : use
	(Jupyter\nnotebook) -> (WebApp) : Streamlit
	(GPU) <-up- (Jupyter\nnotebook) : use
	(GPU) <-up- (WebApp) : use
}
(Jupyter\nnotebook) <-down- (Sensor) : "raw data\nvia SPI"
(WebApp) <-down- (Sensor) : "raw data\nvia SPI"


newpage


cloud Cloud {
	package Train {
	  (Jupyter\nnotebook)
	}
	collections "ML"
	(Jupyter\nnotebook) -up-> ML : generate
	package Inference {
	  (WebApp)
	}
	collections GPU
	ML <-down- (WebApp) : use
	(Jupyter\nnotebook) -> (WebApp) : Streamlit
	GPU <-up- (Jupyter\nnotebook) : use
	GPU <-up- (WebApp) : use
}

package MCU {
	(relay)
}
(Jupyter\nnotebook) <--down-- relay : "raw data\nvia IP"
(WebApp) <--down-- relay : "raw data\nvia IP"
(Sensor) -> relay : SPI


newpage

cloud "Cloud\n(Optional)" {
      package train {
      	      (Jupyter\nnotebook)
      }
      collections ML
      Artifact "Tiny ML"
      package UI {
      	      (WebApp)
      }
      collections GPU
      (Jupyter\nnotebook) -up-> ML
ML -> "Tiny ML" : squash
(Jupyter\nnotebook) -> (WebApp) : Streamlit
GPU <-up- (Jupyter\nnotebook) : use
}

package MCU {
     Artifact TinyML
     TinyML -> (data) : process
}
"Tiny ML" -down-> TinyML : install
MCU ..up..> (WebApp) : notification\nif needed
(Sensor) -down-> data : raw data\nvia SPI

@enduml